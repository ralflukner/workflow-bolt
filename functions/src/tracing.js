/*
 * Global OpenTelemetry tracing setup for Cloud Functions / Node services.
 *
 * The tracer is initialised **once** (Node module singleton) so it can be imported
 * anywhere in the codebase:
 *
 *   const { tracer } = require('./tracing');
 *
 * It reads two environment variables:
 *   OTEL_EXPORTER ("cloudtrace" | "jaeger" | "console")
 *   OTEL_COLLECTOR_ENDPOINT (optional – defaults for exporters)
 *
 * If OTEL_EXPORTER is not set, tracing is disabled (safe-no-op).
 *
 * Correlation-ID → Trace-ID mapping:
 *   When a custom correlationId is provided via the `x-correlation-id` header or
 *   generated by DebugLogger, we convert it to a 32-char hex string (padded or
 *   hashed) so it can be injected into the W3C traceparent header.  This keeps
 *   log search and flame-graph views aligned to the same identifier.
 */

const { diag, DiagConsoleLogger, DiagLogLevel, trace } = require('@opentelemetry/api');

// Export placeholder – will be reassigned after init
let tracer = trace.getTracer('noop');

function initTracing() {
  if (global.__TEBRA_TRACING_INITIALISED__) return;
  global.__TEBRA_TRACING_INITIALISED__ = true;

  const exporterType = process.env.OTEL_EXPORTER; // 'cloudtrace' | 'jaeger' | 'console'
  if (!exporterType) {
    // Tracing disabled – keep noop tracer
    return;
  }

  if (process.env.NODE_ENV !== 'production') {
    diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);
  }

  const { Resource } = require('@opentelemetry/resources');
  const { SemanticResourceAttributes: SRA } = require('@opentelemetry/semantic-conventions');
  const { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');
  const { BatchSpanProcessor, SimpleSpanProcessor, ConsoleSpanExporter } = require('@opentelemetry/sdk-trace-base');

  // Choose exporter
  let exporter;
  const endpoint = process.env.OTEL_COLLECTOR_ENDPOINT;

  switch (exporterType) {
    case 'cloudtrace':
      ({ TraceExporter: exporter } = require('@google-cloud/opentelemetry-cloud-trace-exporter'));
      exporter = new exporter();
      break;
    case 'jaeger':
      ({ JaegerExporter: exporter } = require('@opentelemetry/exporter-jaeger'));
      exporter = new exporter({ endpoint });
      break;
    case 'console':
    default:
      exporter = new ConsoleSpanExporter();
      break;
  }

  const resource = new Resource({
    [SRA.SERVICE_NAME]: process.env.OTEL_SERVICE_NAME || 'workflow-bolt-functions',
    [SRA.SERVICE_VERSION]: process.env.npm_package_version || '0.0.0',
  });

  const provider = new NodeTracerProvider({ resource });
  provider.addSpanProcessor(
    process.env.NODE_ENV === 'production' ? new BatchSpanProcessor(exporter) : new SimpleSpanProcessor(exporter)
  );
  provider.register();

  tracer = trace.getTracer('workflow-bolt');
  diag.info(`[Tracing] OpenTelemetry initialised with ${exporterType} exporter`);
}

initTracing();

module.exports = { tracer }; 