/**
 * Vikunja API Integration for Workflow-Bolt
 * Lightweight, stable project management
 */

interface VikunjaConfig {
  baseUrl: string;
  token: string;
}

interface VikunjaProject {
  id: number;
  title: string;
  description: string;
  created: string;
  updated: string;
}

interface VikunjaTask {
  id: number;
  title: string;
  description: string;
  done: boolean;
  priority: number;
  labels: VikunjaLabel[];
  assignees: VikunjaUser[];
  created: string;
  updated: string;
  due_date?: string;
  project_id: number;
}

interface VikunjaLabel {
  id: number;
  title: string;
  hex_color: string;
}

interface VikunjaUser {
  id: number;
  username: string;
  name: string;
  email: string;
}

class VikunjaApiService {
  private config: VikunjaConfig;

  constructor() {
    this.config = {
      baseUrl: import.meta.env.VITE_VIKUNJA_URL || 'http://localhost:3456',
      token: import.meta.env.VITE_VIKUNJA_TOKEN || ''
    };
  }

  /**
   * Generic API request handler
   */
  private async apiRequest<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.config.baseUrl}/api/v1${endpoint}`;
    
    try {
      const response = await fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.config.token}`,
          ...options.headers
        }
      });

      if (!response.ok) {
        throw new Error(`Vikunja API error: ${response.status} ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Vikunja API request failed:', error);
      throw error;
    }
  }

  /**
   * Test API connection
   */
  async testConnection(): Promise<{ success: boolean; user?: any; error?: string }> {
    try {
      const user = await this.apiRequest('/user');
      return { success: true, user };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * Get all projects
   */
  async getProjects(): Promise<VikunjaProject[]> {
    return this.apiRequest<VikunjaProject[]>('/projects');
  }

  /**
   * Create a new project
   */
  async createProject(title: string, description = ''): Promise<VikunjaProject> {
    return this.apiRequest<VikunjaProject>('/projects', {
      method: 'POST',
      body: JSON.stringify({ title, description })
    });
  }

  /**
   * Get project by ID
   */
  async getProject(projectId: number): Promise<VikunjaProject> {
    return this.apiRequest<VikunjaProject>(`/projects/${projectId}`);
  }

  /**
   * Get tasks for a project
   */
  async getTasks(projectId: number): Promise<VikunjaTask[]> {
    return this.apiRequest<VikunjaTask[]>(`/projects/${projectId}/tasks`);
  }

  /**
   * Create a new task
   */
  async createTask(
    projectId: number,
    title: string,
    description = '',
    priority = 0,
    dueDate?: string
  ): Promise<VikunjaTask> {
    const taskData: any = {
      title,
      description,
      priority,
      project_id: projectId
    };

    if (dueDate) {
      taskData.due_date = dueDate;
    }

    return this.apiRequest<VikunjaTask>(`/projects/${projectId}/tasks`, {
      method: 'POST',
      body: JSON.stringify(taskData)
    });
  }

  /**
   * Update a task
   */
  async updateTask(
    taskId: number,
    updates: Partial<{
      title: string;
      description: string;
      done: boolean;
      priority: number;
      due_date: string;
    }>
  ): Promise<VikunjaTask> {
    return this.apiRequest<VikunjaTask>(`/tasks/${taskId}`, {
      method: 'POST',
      body: JSON.stringify(updates)
    });
  }

  /**
   * Mark task as complete
   */
  async completeTask(taskId: number): Promise<VikunjaTask> {
    return this.updateTask(taskId, { done: true });
  }

  /**
   * Create patient workflow task
   */
  async createPatientWorkflow(
    projectId: number,
    patientName: string,
    appointmentTime: string,
    status: string,
    details: string
  ): Promise<VikunjaTask> {
    const title = `Patient: ${patientName} - ${appointmentTime}`;
    const description = `
**Patient Workflow Tracking**

Patient: ${patientName}
Appointment: ${appointmentTime}
Status: ${status}

**Details:**
${details}

**Workflow Checklist:**
- [ ] Check-in completed
- [ ] Pre-appointment prep
- [ ] Doctor consultation
- [ ] Post-appointment tasks
- [ ] Check-out completed

*Auto-generated by Workflow-Bolt*
    `.trim();

    // Set priority based on appointment urgency
    const priority = this.getPatientPriority(status);

    return this.createTask(projectId, title, description, priority);
  }

  /**
   * Update patient status
   */
  async updatePatientStatus(
    taskId: number,
    newStatus: string,
    completed = false
  ): Promise<VikunjaTask> {
    const updates: any = {
      done: completed
    };

    // Update description to reflect new status
    const task = await this.apiRequest<VikunjaTask>(`/tasks/${taskId}`);
    const updatedDescription = task.description.replace(
      /Status: .*/,
      `Status: ${newStatus}`
    );
    updates.description = updatedDescription;

    return this.updateTask(taskId, updates);
  }

  /**
   * Get patient priority based on status
   */
  private getPatientPriority(status: string): number {
    switch (status.toLowerCase()) {
      case 'urgent':
      case 'emergency':
        return 4; // High priority
      case 'with-doctor':
      case 'in-exam':
        return 3; // Medium-high priority
      case 'waiting':
      case 'checked-in':
        return 2; // Medium priority
      default:
        return 1; // Low priority
    }
  }

  /**
   * Search tasks by patient name
   */
  async findPatientTasks(
    projectId: number,
    patientName: string
  ): Promise<VikunjaTask[]> {
    const tasks = await this.getTasks(projectId);
    return tasks.filter(task =>
      task.title.toLowerCase().includes(patientName.toLowerCase())
    );
  }

  /**
   * Get labels for the project
   */
  async getLabels(): Promise<VikunjaLabel[]> {
    return this.apiRequest<VikunjaLabel[]>('/labels');
  }

  /**
   * Create a label
   */
  async createLabel(title: string, hexColor = '#1973ff'): Promise<VikunjaLabel> {
    return this.apiRequest<VikunjaLabel>('/labels', {
      method: 'POST',
      body: JSON.stringify({
        title,
        hex_color: hexColor
      })
    });
  }

  /**
   * Health check for the service
   */
  async healthCheck(): Promise<{ status: string; message: string }> {
    try {
      await this.apiRequest('/info');
      return { status: 'healthy', message: 'Vikunja is running' };
    } catch (error) {
      return {
        status: 'unhealthy',
        message: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}

// Export singleton instance
export const vikunjaApi = new VikunjaApiService();
export default vikunjaApi;

// Export types
export type {
  VikunjaProject,
  VikunjaTask,
  VikunjaLabel,
  VikunjaUser
};