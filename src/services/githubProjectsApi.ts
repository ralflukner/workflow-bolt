/**
 * GitHub Projects v2 API Integration
 * Secure project management for healthcare workflows
 */

interface GitHubConfig {
  token: string;
  owner: string;
  repo: string;
}

interface ProjectItem {
  id: string;
  title: string;
  status: string;
  assignees: string[];
  labels: string[];
  dueDate?: string;
}

class GitHubProjectsService {
  private config: GitHubConfig;
  private baseUrl = 'https://api.github.com';

  constructor() {
    this.config = {
      token: import.meta.env.VITE_GITHUB_TOKEN || '',
      owner: import.meta.env.VITE_GITHUB_OWNER || '',
      repo: import.meta.env.VITE_GITHUB_REPO || ''
    };
  }

  private async apiRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Authorization': `Bearer ${this.config.token}`,
        'Accept': 'application/vnd.github+json',
        'X-GitHub-Api-Version': '2022-11-28',
        'Content-Type': 'application/json',
        ...options.headers
      }
    });

    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);
    }

    return response.json();
  }

  /**
   * Create issue for patient workflow tracking
   */
  async createPatientIssue(
    patientName: string, 
    appointmentTime: string, 
    status: string,
    details: string
  ): Promise<any> {
    const title = `Patient: ${patientName} - ${appointmentTime}`;
    const body = `
## Patient Workflow Tracking

**Patient**: ${patientName}  
**Appointment**: ${appointmentTime}  
**Status**: ${status}  

## Details
${details}

## Workflow Checklist
- [ ] Check-in completed
- [ ] Pre-appointment prep
- [ ] Doctor consultation
- [ ] Post-appointment tasks
- [ ] Check-out completed

*Auto-generated by Workflow-Bolt*
    `.trim();

    return this.apiRequest(`/repos/${this.config.owner}/${this.config.repo}/issues`, {
      method: 'POST',
      body: JSON.stringify({
        title,
        body,
        labels: ['patient-workflow', `status-${status}`]
      })
    });
  }

  /**
   * Update patient issue status
   */
  async updatePatientStatus(issueNumber: number, newStatus: string): Promise<any> {
    // Get current issue
    const issue = await this.apiRequest<any>(`/repos/${this.config.owner}/${this.config.repo}/issues/${issueNumber}`);
    
    // Update labels
    const newLabels = (issue.labels || [])
      .filter((label: any) => !label.name.startsWith('status-'))
      .map((label: any) => label.name);
    newLabels.push(`status-${newStatus}`);

    return this.apiRequest(`/repos/${this.config.owner}/${this.config.repo}/issues/${issueNumber}`, {
      method: 'PATCH',
      body: JSON.stringify({
        labels: newLabels
      })
    });
  }

  /**
   * Get all patient workflow issues
   */
  async getPatientWorkflows(): Promise<any[]> {
    return this.apiRequest(`/repos/${this.config.owner}/${this.config.repo}/issues?labels=patient-workflow&state=open`);
  }
}

export const githubProjects = new GitHubProjectsService();
export default githubProjects;